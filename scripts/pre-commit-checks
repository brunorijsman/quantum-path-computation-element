#!/bin/bash

RESET="\033[0m"
RED="\033[31m"
GREEN="\033[32m"
INVERT="\033[7m"

MODULE="quantum_path_computation_engine"

progress_ok () {
    message="$1"
    echo -e "${GREEN}[OK]${RESET} ${message}"
}

fail () {
    message="$1"
    remedy="$2"
    output="$3"
    echo -e "${RED}[FAIL]${RESET} ${message}"
    echo -e ""
    if [[ ! -z "${output}" ]]; then
        echo "${output}"
        echo 
    fi
    if [[ ! -z "${remedy}" ]]; then
        echo -e "${RED}${remedy}${RESET}"
        echo 
    fi
    echo -e "${RED}${INVERT}*** DO NOT COMMIT ***${RESET}"
    exit 1
}

check_virtual_environment_is_active () {
    step="Check virtual environment is active"
    if [[ -z "${VIRTUAL_ENV}" ]]; then
        remedy="Activate virtual environment"
        fail ${step} ${remedy}
    fi
    progress_ok "${step}"
}

cleanup_temporary_files () {
    cd ${VIRTUAL_ENV}/..
    scripts/cleanup
    progress_ok "Cleanup temporary files"
}

check_directory_has_perfect_pylint_score () {
    directory="$1"
    step="Check directory ${directory} has perfect pylint score"
    if ! output=$(pylint ${directory}) ; then
        remedy="Fix lint errors for directory ${directory} (score must be perfect 10.0)"
        fail "${step}" "${remedy}" "${output}"
    fi
    progress_ok "${step}"
}

check_directory_module_has_perfect_pylint_score () {
    check_directory_has_perfect_pylint_score ${MODULE}
}

check_directory_tests_has_perfect_pylint_score () {
    check_directory_has_perfect_pylint_score tests
}

check_all_tests_pass () {
    step="Check all tests pass"
    if ! output=$(pytest --cov=tests --cov=${MODULE} --cov-report=html); then
        remedy="Fix failing tests (all tests must pass)"
        fail "${step}" "${remedy}" "${output}"
    fi
    progress_ok "${step}"
}

extract_actual_coverage () {
    report_output=$1
    actual_coverage=$(echo ${report_output} | tail -1 | tr -s " " | cut -d " " -f 4)
    return "${actual_coverage}"
}

check_code_coverage_is_sufficient () {
    minumum_coverage="95"
    output=$(coverage report --fail-under=${minumum_coverage})
    exit_code=$?
    actual_coverage=$(coverage report | tail -1 | tr -s " " | cut -d " " -f 4)
    step="Check code coverage is sufficient (actual coverage is ${actual_coverage}, minumum coverage is ${minumum_coverage}%)"
    if [[ ${exit_code} == 2 ]]; then
        remedy="Increase code coverage from ${actual_coverage} to ${minumum_coverage}%"
        fail "${step}" "${remedy}" "${output}"
    fi
    progress_ok "${step}"
}

check_generate_docs () {
    step="Generate documentation"
    cd ${VIRTUAL_ENV}/../docs
    output=$(make html 2>&1)
    exit_code=$?    
    if [[ ${exit_code} != 0 ]]; then
        remedy="Fix documentation generation"
        fail "${step}" "${remedy}" "${output}"
    fi
    progress_ok "${step}"

}

check_virtual_environment_is_active
cleanup_temporary_files
check_directory_module_has_perfect_pylint_score
check_directory_tests_has_perfect_pylint_score
check_all_tests_pass
check_code_coverage_is_sufficient
check_generate_docs

# TODO: Generate documentation

echo
echo -e "${GREEN}${INVERT}*** OK TO COMMIT ***${RESET}"
